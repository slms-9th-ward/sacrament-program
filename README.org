#+title: Sacrament Meeting Program

* Synopsis

Modify the program in [[file:src/index.html.pm][src/index.html.pm]] and commit and push the changes. GitHub will automatically render the program to https://slms-9th-ward.github.io/sacrament-program/ .

* Description

This is a system to make a program for a Sacrament meeting—or any other church meeting. Instead of an interface where you select text and use menus/keystrokes to select *bold*, _underline_, font size, etc., this system lets you write down the program /in church-service terms/ like "speaker", "hymn", or "announcement", and then it takes care of the specifics of formatting.

The website you are probably reading this on is called GitHub. GitHub is like YouTube, but for computer source code instead of for videos. GitHub holds files as well as the history of how those files evolved.

When you edit the meeting program on GitHub, GitHub will convert the program you wrote into a perfectly-formatted web page. Here are the basic steps:

[[file:docs_img/edit_flow.png]]

1. There is a text file [[file:src/index.html.pm][src/index.html.pm]] that describes what should be on the program.
2. You can edit and save this file. GitHub calls saving "Commit changes".
3. When the file gets saved, GitHub runs a little program that takes the description of the program and turns it into a web page.
4. The web page with any changes is then visible on the web at large.

** How to modify and save the Sacrament program

Visit https://github.com/slms-9th-ward/sacrament-program in a web browser. Once you are here, you should be presented with a list of files. Click on =src=

[[file:docs_img/smp01.png]]

then click on =index.html.pm=

[[file:docs_img/smp02.png]]

then click on the pencil icon in the right-hand corner of the file viewer to begin editing.

[[file:docs_img/smp03.png]]

After you're done making your edits, click the green "Commit changes…" button.

[[file:docs_img/smp04.png]]

This will prompt you for something called a "Commit message": this is just a place where you can describe what and why you changed something. You can just use the default message "Update index.html.pm", so don't worry if you don't want to change the commit message or the extended description.

Now just hit the big green "Commit changes" button

[[file:docs_img/smp05.png]]

Now you just wait a minute or two for the conversion to run, and then the website should be updated automatically!

** Markup language tutorial

Here is what a very basic program might look like:

#+begin_src racket
  #lang pollen

  @sacrament-meeting-header{Salt Lake Married Student 9th Ward}

  @(meeting-org #:conducting "Brother James"
                #:presiding "Bishop Jones"
                #:organist "Sister Green"
                #:chorister "Sister Brown")

  @section{Program}

  @opening-hymn{68}

  @opening-prayer{Brother Whomever}

  @event{Ward & Stake Business}

  @sacrament-hymn{194}

  @event{Administration of the Sacrament}

  @talk{Sister Soandso}
#+end_src

This is a meeting with some basic meeting organization details, a section header that says "Program", an opening hymn, prayer, a notice for business, another hymn, notice for the Sacrament, and a talk.

Each of these parts of the program is represented by a /command/. A command looks like =@command-name{Text goes here}=: the =@= character tells the processor that the next bit is a command. The =command-name= tells the processor how to interpret what comes after, and the bit in ={…}= is text or a number that the command uses in the formatting.

Let's go through this line-by-line and examine what each bit does.

 - =#lang pollen= :: This is some information that the formatter needs. (Incidentally, the formatter's name is [[https://docs.racket-lang.org/pollen/][Pollen]], which is why "pollen" is up there.) Don't touch this bit.

 - =@sacrament-meeting-header{Salt Lake Married Student 9th Ward}= :: This writes out the Sacrament meeting header. The bit inside the curly braces is the unit name.

 - =@(meeting-org …)= :: This is a bit of a special command: it sets up the meeting info block. You can change the names inside the double quotes *but it is very important that the double quotes remain!* Missing quotes will confuse the formatter.

 - =@section{Program}= :: This renders a big bit of centered text to begin a section. You might want =@section{Program}=, =@section{Announcements}=, and =@section{Upcomming Events}= in a program. The text inside the curly braces can be whatever you want.

 - =@opening-hymn{68}= :: This creates an item in the program with the headline "opening hymn" in small caps. Underneath it puts the hymn number as well as the hymn name. (In this example, /A Mighty Fortress Is Our God/.) If you just put the hymn number in the braces, it will fetch the name automatically for you. If you put the hymn name (make sure you get the punctuation correct!) it will find the number for you!

   If the song is /not/ in the hymn book, there are ways of configuring exactly what is displayed. More on that later.

 - =@opening-prayer{Name goes here}= :: Creates an item with the headline "invocation" in small caps and the person's name underneath.

 - =@event{Ward & Stake Business}= :: Creates an item for a generic event in the meeting. You can put any text inside the curly braces.

 - =@sacrament-hymn{194}= :: Like =@opening-hymn=, but the headline is "sacrament hymn".

 - =@event{…Sacrament}= :: Exactly the same as before with =@event{Ward … Business}=, only the text is "Administration of the Sacrament".

 - =@talk{Sister Soandso}= :: Creates an item for a talk.

As you might have guessed, there are commands for =@rest-hymn=, =@closing-hymn=, and =@closing-prayer= which you will want to use. There are other commands for announcements and calendar events. More on those in the next section.

*** Remember this about using commands

 - Commands all start with a =@= character. :: This lets the formatter know what's a command and what isn't.

 - Use only commands documented here. :: Make sure you get the spelling exactly right. The formatter will not automatically guess at corrections.

 - Make sure all braces and double quotes match. :: The formatter expects all =""= and ={}= characters to match up. If they don't, the formatter will not guess at what you meant and will break until you fix it.

 - Use the right command for the job. :: If you need to represent something that doesn't have a command for it, let me know and I'll fix it. In a pinch, a generic =@event= command should work.

That's it! You can play around with it. If you make a mistake and everything seems broken, just replace the contents of =index.html.pm= with the sample provided below and work back from there.

You should be good to start making and maintaining the program for your meetings now. For more details on configuring certain aspects of the commands, keep reading.

** Markup language details

This section is a detailed description of every command that you can use to build a program. First, a few terms:

[[file:docs_img/command_anatomy.png]]

 - Commands begin with the =@= character. This is called the *command character*.
 - The word(s) immediately following the command character are the *command name*.
 - Some commands have square brackets (=[]=) after the command name. The stuff in here is called the *argument list*.
 - There are two kinds of things that can go in the argument list:
   + *Normal arguments*: all text that is an argument to a command *must* be wrapped in double quote characters. (=""=) Numbers don't need quotes.
   + *Keyword arguments*: some commands take arguments denoted with a keyword. A *keyword* starts with the characters =#:= and has a short name. The *keyword argument* is whatever follows the keyword.
 - After the square brackets close, then comes text inside curly braces. This is called the *text argument*.

Keywords can appear in any order. That means that this:

#+begin_src racket
  @calendar-event["Ward party" #:date "2024-03-14" #:time "19:00"]{…}
#+end_src

and this:

#+begin_src racket
  @calendar-event["Ward party" #:time "19:00" #:date "2024-03-14"]{…}
#+end_src

are equivalent. Note that keyword arguments come *after* the regular arguments in the argument list. Also, note that *every* argument is closed in double quotes.

*** =program-header=

Arguments:
 1. Required; Unit name.

Text argument: Required. Title at top of program.

# TODO: side/by/side example

*** =sacrament-meeting-header=

Keyword arguments: None.

Text argument: Required. Unit name.

This is just a helper function that wraps =program-header=. These two lines are equivalent:

#+begin_src racket
  @program-header["My Unit Name Here"]{Sacrament Meeting Program}
  @sacrament-meeting-header{My Unit Name Here}
#+end_src

*** =welcome-blurb=

Keyword arguments: None.

Text argument: Required. Text to appear at the top of the program.

*** =meeting-org=

Keyword arguments:
 - =#:presiding=
 - =#:conducting=
 - =#:chorister=
 - =#:pianist=
 - =#:organist=

Must be called like so:

#+begin_src racket
  @(meeting-org #:presiding "…" #:conducting "…"
                #:chorister "…" #:organist "…")
#+end_src

All arguments are optional. Any keyword argument not included will not appear in the organization block.

*** =section=

Text argument: Required. Section name.

*** =event=

Text argument: Required. Event name. *Note:* this is a /program/ event, not a /calendar/ event.

*** =person-event=

Keyword arguments:
 - =#:term= :: Required. Heading over person's name indicating what kind of event it is.

Text argument: Required. Person's name.

This is a generic program event command. The =…-prayer= and =talk= commands are all special cases of this command.

*** =opening-prayer=, =closing-prayer=, =talk=

Keyword arguments:
 - =#:term= :: Optional. Defaults to "Invocation" for =opening-prayer=, "Benediction" for =closing-prayer=, and "Speaker" for =talk=.

Text argument: Optional. Defaults to "By invitation". Person's name.

*** =musical-number=

Arguments:
 1. Required. Name of the piece being performed.

Keyword arguments:
 - =#:term= :: Optional. Defaults to "Musical Number".
 - =#:performed-by= :: Optional. Defaults to =" performed by "=. This is the text between the name of the musical number (which will be italicized) and the name of the performer.

Text argument: Required. Name of performer.

*** =hymn=

Keyword arguments:
 - =#:term= :: Optional. Defaults to "Hymn".

Text argument: Optional. Defaults to "By announcement". Hymn name or number. The renderer will attempt to fetch the name if given the number, or the number given the name. New hymns are in the hymn–number database!

*** =opening-hymn=, =closing-hymn=, =rest-hymn=, =sacrament-hymn=

Same as =hymn=, but =#:term= defaults to ="Opening Hymn"=, ="Closing Hymn"=, ="Rest Hymn"=, and ="Sacrament Hymn"= respectively. (May be overridden if the keyword is specified; it is just the default that is different.)

Text argument: Required. Hymn name or number. Same as =hymn=.

*** =announcement=

Arguments:
 1. Required. Header for the announcement. Do not forget to wrap in double quotes.

Text argument: Required. Body text for the announcement. May have multiple paragraphs between the curly braces.

*** =calendar-event=

Arguments:
 1. Required. Event title. Do not forget the double quotes.

Keyword arguments:
 - =#:date= :: Required. Date for the event. If provided as a string in [[https://en.wikipedia.org/wiki/ISO_8601][ISO 8601]] format (i.e. =YYYY-MM-DD=) then this date will be formatted nicely like "Sunday, December 1, 2024". Otherwise, the date string will be inserted as-is.
 - =#:time= :: Optional. Defaults to blank. If given, formatter will attempt to interpret as military time (following the ISO 8601 standard) and will format nicely. E.g. =19:00= will be formatted as "7:00 PM".

Text argument: Required. Event description. May have multiple paragraphs between the curly braces.

** Managing edit access

*** Granting someone new access

- The person will need to make an account on GitHub. To do this, they will need an email. During signup they will be prompted for a username and a password.

- Once they have their account created, someone who has access to the program needs to add them to the organization. Go to the [[https://github.com/orgs/slms-9th-ward/people]["People" tab]] and then hit "Invite member".

- Finally, ensure that the person has the right permissions. People who need long-term access should have the role of "Owner". I recommend all members of the bishopric and the clerk have the "owner" role.

*** Revoking access

Simply go to the [[https://github.com/orgs/slms-9th-ward/people]["People" tab]] and hit the button with three dots next to their name. Select "Remove from organization" to revoke their access.

* Sample program (use this if you break everything and can't recover)

If all hope seems lost, put this chunk in [[file:src/index.html.pm][src/index.html.pm]] and then tweak the names and numbers as needed.

#+begin_src racket
  #lang pollen

  @sacrament-meeting-header{Salt Lake Married Student 9th Ward}

  @(meeting-org #:conducting "Brother James"
                #:presiding "Bishop Jones"
                #:organist "Sister Green"
                #:chorister "Sister Brown")


  @section{Program}

  @opening-hymn{68}

  @opening-prayer{Brother Whomever}

  @event{Ward & Stake Business}

  @sacrament-hymn{194}

  @event{Administration of the Sacrament}

  @talk{Sister Soandso}

  @talk{Brother Soandso}

  @hymn[#:term "Rest Hymn"]{100}

  @talk{Another Bloke}

  @event{Announcements}

  @closing-hymn{201}

  @closing-prayer{Sister Whomever}


  @section{Announcements}

  @announcement["Ward Slack workspace"]{
  Our ward uses a Slack workspace to send out announcements about activites, as well as to coordinate service. Please join with @link["https://example.com"]{this invite link}.
  }

  @announcement["Tithing settlement"]{
  Sign up for tithing settlement on Slack or at @link["https://example.com"]{this link}.
  }

  @section{Upcoming Events}

  @calendar-event[#:title "Ward Christmas party" #:date "2024-12-06" #:time "18:00"]{
  Invite your friends to the ward Christmas party! There will be good food and family-friendly entertainment.
  }
#+end_src

* Implementation details

This project uses [[https://docs.racket-lang.org/pollen/][Pollen]] to render the markup. The Sacrament-program specific markup is in [[file:src/pollen.rkt][src/pollen.rkt]], which is written in the [[https://racket-lang.org][Racket programming language]].
